# analyze_telemetry.py
# Visualizes telemetry CSV files generated by the PowerShell logger.
# Produces graphs + summary statistics for RTT, LQI, MAC errors, and state transitions.

import os
import glob
from datetime import datetime
import pandas as pd
import matplotlib.pyplot as plt


# ---------- helpers ----------
def find_latest_csv(folder="C:\\Users\\adire\\Desktop\\nordic_logs"):
    files = glob.glob(os.path.join(folder, "child_telemetry_*.csv"))
    if not files:
        raise FileNotFoundError(f"No telemetry CSV found in {folder}")
    return max(files, key=os.path.getmtime)


def load_csv(path):
    df = pd.read_csv(path)
    df["timestamp"] = pd.to_datetime(df["timestamp"], errors="coerce")
    # convert numerics safely
    num_cols = [
        "rtt_ms","lqi_in","lqi_out","age_s","tx_total","rx_total",
        "tx_err_cca","tx_retry","rx_err_fcs"
    ]
    for col in num_cols:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors="coerce")
    if "event" not in df.columns:
        df["event"] = ""
    if "state" not in df.columns:
        df["state"] = ""
    return df.sort_values("timestamp").reset_index(drop=True)


def split_events(event_str):
    if not isinstance(event_str, str) or not event_str:
        return set()
    return set(e.strip() for e in event_str.split("|") if e.strip())


def event_times(df, name):
    idx = [i for i, s in enumerate(df["event"]) if name in split_events(s)]
    return df.loc[idx, "timestamp"]


def mark_detached(ax, df):
    """Color background when state == detached."""
    in_detach = False
    start_time = None
    for _, row in df.iterrows():
        state = str(row.get("state", "")).lower()
        if not in_detach and state == "detached":
            start_time = row["timestamp"]
            in_detach = True
        elif in_detach and state != "detached":
            ax.axvspan(start_time, row["timestamp"], color="red", alpha=0.15)
            in_detach = False
    if in_detach and start_time is not None:
        ax.axvspan(start_time, df["timestamp"].iloc[-1], color="red", alpha=0.15)


def savefig(fig, csv_path, suffix):
    base = os.path.splitext(csv_path)[0]
    out = f"{base}_{suffix}.png"
    fig.savefig(out, dpi=140, bbox_inches="tight")
    print(f"Saved: {out}")


# ---------- main ----------
def main(folder="."):
    csv_path = find_latest_csv(folder)
    print(f"\nUsing telemetry file: {csv_path}\n")
    df = load_csv(csv_path)
    t = df["timestamp"]

    # ---------- 1) RTT ----------
    fig1, ax1 = plt.subplots()
    ax1.plot(t, df["rtt_ms"], color="tab:blue", label="RTT (ms)")
    ax1.set_title("RTT over time")
    ax1.set_xlabel("Timestamp")
    ax1.set_ylabel("RTT (ms)")
    mark_detached(ax1, df)
    ax1.legend()
    savefig(fig1, csv_path, "rtt")

    # ---------- 2) LQI ----------
    fig2, ax2 = plt.subplots()
    ax2.plot(t, df["lqi_in"], label="LQI in", color="tab:orange")
    ax2.plot(t, df["lqi_out"], label="LQI out", color="tab:green")
    ax2.set_title("LQI over time")
    ax2.set_xlabel("Timestamp")
    ax2.set_ylabel("LQI")
    mark_detached(ax2, df)
    ax2.legend()
    savefig(fig2, csv_path, "lqi")

    # ---------- 3) MAC deltas ----------
    def delta(col):
        if col not in df: return None
        return df[col].diff().fillna(0)
    fig3, ax3 = plt.subplots()
    d_retry = delta("tx_retry")
    d_cca = delta("tx_err_cca")
    d_fcs = delta("rx_err_fcs")
    if d_retry is not None: ax3.plot(t, d_retry, label="Δ retry")
    if d_cca is not None: ax3.plot(t, d_cca, label="Δ CCA")
    if d_fcs is not None: ax3.plot(t, d_fcs, label="Δ FCS")
    ax3.set_title("MAC error deltas per tick")
    ax3.set_xlabel("Timestamp")
    ax3.set_ylabel("Count")
    ax3.legend()
    mark_detached(ax3, df)
    savefig(fig3, csv_path, "mac_deltas")

    # ---------- 4) State timeline ----------
    state_map = {"disabled":0, "detached":1, "child":2, "router":3, "leader":4, "":-1}
    y = df["state"].map(lambda s: state_map.get(str(s).lower(), -1))
    fig4, ax4 = plt.subplots()
    ax4.step(t, y, where="post", color="tab:purple")
    ax4.set_yticks(list(state_map.values()))
    ax4.set_yticklabels(list(state_map.keys()))
    ax4.set_title("Node state timeline")
    ax4.set_xlabel("Timestamp")
    ax4.set_ylabel("State")
    mark_detached(ax4, df)
    savefig(fig4, csv_path, "state")

    # ---------- 5) summary ----------
    print("\n--- Summary ---")
    # RTT stats
    valid_rtt = df["rtt_ms"].dropna()
    if len(valid_rtt):
        print(f"Average RTT: {valid_rtt.mean():.2f} ms")
        print(f"Min RTT: {valid_rtt.min():.2f} ms, Max RTT: {valid_rtt.max():.2f} ms")
    else:
        print("No RTT data found.")
    # events
    n_detach = len(event_times(df, "detached_start"))
    n_re = len(event_times(df, "reattached"))
    n_switch = len(event_times(df, "parent_switch"))
    total = len(df)
    detached_rows = sum(str(s).lower() == "detached" for s in df["state"])
    uptime_pct = 100.0 * (1 - detached_rows / total)
    print(f"Detachments: {n_detach}, Reattachments: {n_re}, Parent switches: {n_switch}")
    print(f"Uptime (child state) = {uptime_pct:.1f}%")

    plt.show()


if __name__ == "__main__":
    main(r"C:\Users\adire\Desktop\nordic_logs")
